#!/usr/bin/env python

from argparse import ArgumentParser
from datetime import datetime
from logging import getLogger
from sys import argv
import warnings

from alma_rest import logfile_setup
from alma_rest import xml_extract
from marc_tools.marcxml_to_lists import extract_all_keys, extract_values_as_lists

logger = getLogger(__name__)
logfile_setup.log_to_stdout(logger)

# provide info for help when called from commandline

parser = ArgumentParser(
    description="For a given fetched_records.job_timestamp extract all MARC21 records and export contents to TSV.",
    epilog="")

help_job_timestamp = "Format 'YYYY-mm-dd HH:MM:SS.000000+0000', pick for set of records from table fetched_records."
parser.add_argument('job_timestamp', type=str, help=help_job_timestamp)

help_tsv_path = "File system path of where you want the tsv saved."
parser.add_argument('tsv_path', type=str, help=help_tsv_path)

help_tsv_header = "Provide your own list of categories you want to extract as a comma-separated list of strings."
parser.add_argument('--tsv-header', type=str, help=help_tsv_header)

help_split_sf = """When set, each subfield gets its own cell. Otherwise concatenates them with " $$" as delimiter."""
parser.add_argument('--split-sf', action='store_true', help=help_split_sf)

help_repetition = """Concat all contents of a marc tag to one cell with delimiter " ||| " for repeated tags."""
parser.add_argument('--concat-repetition', action='store_true', help=help_repetition)

args = parser.parse_args()


# set timestamp from argv

timestamp_format = '%Y-%m-%d %H:%M:%S.%f%z'

try:

    job_timestamp = datetime.strptime(argv[1], timestamp_format)

except ValueError:

    warnings.warn(f"Date in format {timestamp_format} expected.")
    exit(1)

else:

    # extract data

    if args.tsv_header:
        tsv_columns = args.tsv_header.split(',')
    else:
        gen_record_dicts = xml_extract.extract_marc_for_job_timestamp(job_timestamp)
        tsv_columns = extract_all_keys(gen_record_dicts, args.concat_repetition, args.split_sf)

    gen_record_dicts = xml_extract.extract_marc_for_job_timestamp(job_timestamp)

    with open(args.tsv_path, 'w') as tsv_file:

        tsv_file.write('\t'.join(tsv_columns))

        for record_contents in extract_values_as_lists(gen_record_dicts, tsv_columns):
            tsv_file.write('\n'+'\t'.join(record_contents))
